$ModLoad imuxsock                       # local message reception (rsyslog uses a datagram socket)
$MaxMessageSize 4k                      # default is 2k
$WorkDirectory /var/vcap/data/syslog_forwarder/buffered # where messages should be buffered on disk

# Forward vcap messages to the aggregator
#
$ActionResumeRetryCount -1              # Try until the server becomes available
$ActionQueueType LinkedList             # Allocate on-demand
$ActionQueueFileName agg_backlog        # Spill to disk if queue is full
$ActionQueueMaxDiskSpace 32m            # Max size for disk queue
$ActionQueueLowWaterMark 2000           # Num messages. Assuming avg size of 512B, this is 1MiB.
$ActionQueueHighWaterMark 8000          # Num messages. Assuming avg size of 512B, this is 4MiB. (If this is reached, messages will spill to disk until the low watermark is reached).
$ActionQueueTimeoutEnqueue 0            # Discard messages if the queue + disk is full
$ActionQueueSaveOnShutdown on           # Save in-memory data to disk if rsyslog shuts down

# Listen for logs over UDP
#
$ModLoad imudp
$UDPServerAddress 127.0.0.1
$UDPServerRun 514


template(name="BoshLogTemplate" type="list") {
constant(value="<")
property(name="pri")
constant(value=">")
property(name="timestamp" dateFormat="rfc3339")
constant(value=" <%= spec.address %> ")
property(name="programname")
constant(value=" <%= spec.job.name %>/<%= spec.id %> ")
property(name="msg")
}

<%= p('custom_rule') %>

<% if p('tls_enabled') %>
  <% ca_cert_path = '/etc/ssl/certs/ca-certificates.crt' 

  if_p('ca_cert') do
    ca_cert_path = '/var/vcap/jobs/syslog_forwarder/config/ca_cert.pem'
  end %>

$DefaultNetstreamDriverCAFile <%= ca_cert_path %> # trust these CAs
$ActionSendStreamDriver gtls # use gtls netstream driver
$ActionSendStreamDriverMode 1 # require TLS
$ActionSendStreamDriverAuthMode x509/name # authenticate by hostname
$ActionSendStreamDriverPermittedPeer <%= p('permitted_peer') %>
<% end %>

<% 
syslog_transport = nil
syslog_address = nil
syslog_port = nil

if_link('syslog_consumer') do |syslog_consumer|
  %>
  # in if_link('syslog_consumer')
  # syslog_consumer.instances = <%= syslog_consumer.instances.pretty_inspect %>
  # syslog_address = <%= syslog_consumer.instances[0].address %>
  # syslog_port = <%= syslog_consumer.p('port') %>
  # syslog_transport = <%= syslog_consumer.p('transport') %>
  <%
  syslog_address = syslog_consumer.instances[0].address
  syslog_port = syslog_consumer.p('port')
  syslog_transport = syslog_consumer.p('transport')
end %>

<% if_p("destination_address", "port", "transport") do |destination_address, port, transport|
  %>
  # in if_p("destination_address", "port", "transport")
  <%
  syslog_address = destination_address
  syslog_port = port
  syslog_transport = transport
end %>

# Keep filtered programname in sync with syslog_event_forwarder.rb
<% if syslog_transport == 'relp' %>
$ModLoad omrelp
:omrelp:<%= syslog_address %>:<%= syslog_port %>;BoshLogTemplate
<% elsif syslog_transport == 'udp' %>
@<%= syslog_address %>:<%= syslog_port %>;BoshLogTemplate
<% elsif syslog_transport == 'tcp' %>
@@<%= syslog_address %>:<%= syslog_port %>;BoshLogTemplate
<% else %>
  <% raise 'only RELP, UDP, and TCP are supported' %>
<% end %>


# Prevent them from reaching anywhere else
:programname, startswith, "vcap." ~

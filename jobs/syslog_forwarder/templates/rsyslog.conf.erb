$ModLoad imuxsock                       # local message reception (rsyslog uses a datagram socket)
$MaxMessageSize 4k                      # default is 2k
$WorkDirectory /var/vcap/data/syslog_forwarder/buffered # where messages should be buffered on disk

# Forward vcap messages to the aggregator
#
$ActionResumeRetryCount -1              # Try until the server becomes available
$ActionQueueType LinkedList             # Allocate on-demand
$ActionQueueFileName agg_backlog        # Spill to disk if queue is full
$ActionQueueMaxDiskSpace 32m            # Max size for disk queue
$ActionQueueLowWaterMark 2000           # Num messages. Assuming avg size of 512B, this is 1MiB.
$ActionQueueHighWaterMark 8000          # Num messages. Assuming avg size of 512B, this is 4MiB. (If this is reached, messages will spill to disk until the low watermark is reached).
$ActionQueueTimeoutEnqueue 0            # Discard messages if the queue + disk is full
$ActionQueueSaveOnShutdown on           # Save in-memory data to disk if rsyslog shuts down

# Listen for logs over UDP
#
$ModLoad imudp
$UDPServerAddress 127.0.0.1
$UDPServerRun 514


template(name="BoshLogTemplate" type="list") {
constant(value="<")
property(name="pri")
constant(value=">")
property(name="timestamp" dateFormat="rfc3339")
constant(value=" <%= spec.address %> ")
property(name="programname")
constant(value=" <%= spec.job.name %>/<%= spec.id %> ")
property(name="msg")
}

<%= p('custom_rule') %>

<% if p('tls_enabled') %>
$DefaultNetstreamDriverCAFile /var/vcap/jobs/syslog_forwarder/config/ca_cert.pem # trust these CAs
$ActionSendStreamDriver gtls # use gtls netstream driver
$ActionSendStreamDriverMode 1 # require TLS
$ActionSendStreamDriverAuthMode x509/name # authenticate by hostname
$ActionSendStreamDriverPermittedPeer <%= p('permitted_peer') %>
<% end %>

<% if_p("destination_address", "port", "transport") do |destination_address, port, transport| %>

# Keep filtered programname in sync with syslog_event_forwarder.rb
    <% if transport == "relp" %>
$ModLoad omrelp
:omrelp:<%= destination_address %>:<%= port %>;BoshLogTemplate
    <% elsif transport == "udp" %>
@<%= destination_address %>:<%= port %>;BoshLogTemplate
    <% elsif transport == "tcp" %>
@@<%= destination_address %>:<%= port %>;BoshLogTemplate
    <% else %>
        <% raise "only RELP, UDP, and TCP are supported" %>
    <% end %>

<% end  %>

# Prevent them from reaching anywhere else
:programname, startswith, "vcap." ~

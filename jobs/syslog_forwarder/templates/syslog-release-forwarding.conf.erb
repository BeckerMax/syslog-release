<% unless p('syslog.migration.disabled') %>
<%

syslog_address = nil
syslog_port = nil
syslog_transport = nil

if_p('syslog.address', 'syslog.port', 'syslog.transport') do |address, port, transport|
  syslog_address = address
  syslog_port = port
  syslog_transport = transport
end.else do
  syslog_storer = link('syslog_storer')
  syslog_address = syslog_storer.instances[0].address
  syslog_port = syslog_storer.p('syslog.port')
  syslog_transport = syslog_storer.p('syslog.transport')
end

%>

<% if p('syslog.fallback_servers').length > 0 %>
<% raise 'only RELP and TCP protocols are supported for fallback servers (was UDP)' if syslog_transport == 'udp' %>
$ActionResumeRetryCount 2              # Try with a fallback server after 2 retries
$ActionQueueType Direct
<% else %>
$ActionResumeRetryCount -1             # Try until the server becomes available
$ActionQueueType LinkedList            # Allocate on-demand
<% end %>

<% if p('syslog.tls_enabled') %>
  <%
    ca_cert_path = '/etc/ssl/certs/ca-certificates.crt'

    if_p('syslog.ca_cert') do
      ca_cert_path = '/var/vcap/jobs/syslog_forwarder/config/ca_cert.pem'
    end
  %>

$DefaultNetstreamDriverCAFile <%= ca_cert_path %>                 # trust these CAs
$ActionSendStreamDriver gtls                                      # use gtls netstream driver
$ActionSendStreamDriverMode 1                                     # require TLS
$ActionSendStreamDriverAuthMode x509/name                         # authenticate by hostname
$ActionSendStreamDriverPermittedPeer <%= p('syslog.permitted_peer') %>
<%
  else
    if_p('syslog.ca_cert') do
      raise "A ca cert was provided but tls is not enabled. Set 'syslog.tls_enabled' to true"
    end
  end
%>

<% if syslog_transport == 'relp' %>
$ModLoad omrelp
*.* :omrelp:<%= syslog_address %>:<%= syslog_port %>;SyslogForwarderTemplate
<% elsif syslog_transport == 'udp' %>
*.* @<%= syslog_address %>:<%= syslog_port %>;SyslogForwarderTemplate
<% elsif syslog_transport == 'tcp' %>
*.* @@<%= syslog_address %>:<%= syslog_port %>;SyslogForwarderTemplate
<% else %>
<% raise "only RELP, UDP, and TCP protocols are supported (was '#{syslog_transport}')" %>
<% end %>

<% if p('syslog.fallback_servers').length > 0 %>
$ActionExecOnlyWhenPreviousIsSuspended on
    <% p('syslog.fallback_servers').each do |fallback_server| %>
        <%
          syslog_fallback_address = fallback_server.fetch('address')
          syslog_fallback_port = fallback_server.fetch('port')
          syslog_fallback_transport = fallback_server.fetch('transport')
        %>
        <% if syslog_fallback_transport == 'relp' %>
$ModLoad omrelp
:omrelp:<%= syslog_fallback_address %>:<%= syslog_fallback_port %>;SyslogForwarderTemplate
        <% elsif syslog_fallback_transport == 'tcp' %>
& @@<%= syslog_fallback_address %>:<%= syslog_fallback_port %>;SyslogForwarderTemplate
        <% else %>
          <% raise "only RELP, and TCP protocols are supported for fallback servers (was '#{syslog_fallback_transport}')" %>
        <% end %>
    <% end %>
$ActionExecOnlyWhenPreviousIsSuspended off
<% end %>

# Prevent vcap.* messsages from reaching anywhere else
:programname, startswith, "vcap." stop
<% end %>
